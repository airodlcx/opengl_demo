#ifndef CAMERA_H
#define CAMERA_H

#include <glad/glad.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <vector>

enum Camera_Movement{
	FORWARD	,
	BACKWARD,
	LEFT,
	RIGHT
};

const float YAW = -90.0;
const float PITCH = 0.0f;
const float SPEED = 2.5f;
const float SENSITICTY = 0.1f;
const float ZOOM = 45.0f;

class Camera{
public:
	// Camera Attributes
	glm::vec3 Position;
	glm::vec3 Front;
	glm::vec3 Up;
	glm::vec3 Right;
	glm::vec3 WorldUp;
	// Eular Angles
	float Yaw;
	float Pitch;
	// Camera options
	float MovementSpeed;
	float MouseSensitivity;
	float Zoom;
	// Constructor with vectors
	    Camera(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f), float yaw = YAW, float pitch = PITCH) : Front(glm::vec3(0.0f, 0.0f, -1.0f)), MovementSpeed(SPEED), MouseSensitivity(SENSITIVTY), Zoom(ZOOM)
	    {
	        Position = position;
	        WorldUp = up;
	        Yaw = yaw;
	        Pitch = pitch;
	        updateCameraVectors();
	    }
	    // Constructor with scalar values
	    Camera(float posX, float posY, float posZ, float upX, float upY, float upZ, float yaw, float pitch) : Front(glm::vec3(0.0f, 0.0f, -1.0f)), MovementSpeed(SPEED), MouseSensitivity(SENSITIVTY), Zoom(ZOOM)
	    {
	        Position = glm::vec3(posX, posY, posZ);
	        WorldUp = glm::vec3(upX, upY, upZ);
	        Yaw = yaw;
	        Pitch = pitch;
	        updateCameraVectors();
	    }

private:
}
